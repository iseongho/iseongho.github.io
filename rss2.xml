<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Seongho&#39;s Dev Story</title>
    <link>https://iseongho.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>이성호의 개발 이야기</description>
    <pubDate>Fri, 01 Mar 2019 11:34:27 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>HTTP와 HTTPS의 차이 그리고 SSL에 대한 설명</title>
      <link>https://iseongho.github.io/posts/http-vs-https-and-ssl/</link>
      <guid>https://iseongho.github.io/posts/http-vs-https-and-ssl/</guid>
      <pubDate>Sun, 17 Feb 2019 10:54:32 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;오늘날의 우리는 HTTP와 HTTPS라는 통신 규약을 사용하며 살아가고 있습니다.&lt;br&gt;우리가 사용하고 있는 그것들을 이해해봅시다.&lt;/p&gt;
&lt;h1 id=&quot;HTTP-VS-HTTPS&quot;&gt;&lt;a href=&quot;#HTTP-VS-HTTPS&quot; class=&quot;head
        
      
      </description>
      
      <content:encoded><![CDATA[<p>오늘날의 우리는 HTTP와 HTTPS라는 통신 규약을 사용하며 살아가고 있습니다.<br>우리가 사용하고 있는 그것들을 이해해봅시다.</p><h1 id="HTTP-VS-HTTPS"><a href="#HTTP-VS-HTTPS" class="headerlink" title="HTTP VS HTTPS"></a>HTTP VS HTTPS</h1><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>HTTP는 Hypertext Transfer Protocol의 약자입니다. 풀어서 해석하자면 이렇습니다.</p><ul><li>Hypertext: Text를 통해 문서들을 자유롭게 이동할 수 있는 문서를 말하며, Web이라는 것은 콘텐츠들이 Hypertext로 묶인 집합입니다. 즉 이것은 HTML을 뜻합니다.</li><li>Transfer Protocol: WWW(World Wide Web) 상에서 정보를 주고받을 수 있는 양식과 규칙의 체계입니다.</li></ul><p>다시 합쳐 생각하자면 Client와 Server가 HTML을 주고받을 수 있는 양식과 규칙의 체계입니다. HTTP를 통해 Server는 Client가 원하는 것이 무엇인지 알고 HTML이 포함된 Text를 줄 수 있습니다. 누군가 이 신호를 가로챈다면 Text의 내용을 본다거나 변조할 수 있습니다.</p><h3 id="HTTP-요약"><a href="#HTTP-요약" class="headerlink" title="HTTP 요약"></a>HTTP 요약</h3><ul><li>Client와 Server가 HTML을 주고받을 수 있는 Protocol입니다.</li><li>암호화 과정이 없습니다.</li></ul><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTPS는 HTTP에서 S가 추가됐습니다. S는 Over Secure Socket Layer의 약자입니다. 이 약자에서 중요한 것은 Secure(보안)입니다. 쉽게 말하자면 보안이 강화된 HTTP입니다.</p><p>이것이 왜 존재하게 되었냐면 앞서 말했듯이 HTTP는 누군가 이 신호를 가로챌 수 있고 변조할 수 있습니다. 악의적인 의도로 회원 정보, 결제 정보 등등 민감한 정보를 감청하고 변조하지 못하게 하기 위해서입니다. HTTP에 SSL과 같은 보안 계층을 추가함으로써 보안을 강화했습니다.</p><h3 id="HTTPS-요약"><a href="#HTTPS-요약" class="headerlink" title="HTTPS 요약"></a>HTTPS 요약</h3><ul><li>보안이 강화된 HTTP입니다.</li><li>HTTP에 SSL과 같은 보안 계층을 추가함으로써 보안을 강화했습니다.</li></ul><h1 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h1><p>넷스케이프에서 개발한 인터넷 보안 Protocol이고, 위에서 말했듯이 SSL은 Secure Socket Layer의 약자입니다.</p><p>SSL은 공인된 제 3자 인증 기관이 보증해주는 전자화된 문서(Certificate Authority or CA)로 부터 서버와 클라이언트의 인증을 하는 데 사용됩니다. 또한 브라우저가 CA 목록을 알고 있으므로 여기 포함되어야 공인된 CA가 될 수 있습니다.</p><h2 id="SSL의-암호화-종류"><a href="#SSL의-암호화-종류" class="headerlink" title="SSL의 암호화 종류"></a>SSL의 암호화 종류</h2><p>SSL의 암호화 종류를 알기에 앞서 키라는 개념을 이해해야 합니다. 암호화를 할 때 사용하는 일종의 비밀번호를 키라고 합니다. 키에 따라 암호화된 결과가 다르기 때문에 키를 알아야만 암호화와 복호화가 가능합니다.</p><ul><li>대칭키 기법<ul><li>하나의 키를 Client와 Server에서 같이 씁니다.</li><li>해커가 하나의 키를 알아내면 암호화된 패킷 모두 해독 가능해져서 보안에 좋지 않습니다.</li></ul></li><li>공개키 기법<ul><li>개인과 서버가 다른 키를 가집니다.</li><li>인코딩 키는 공개키로 공개되어 있다.</li><li>디코딩 키는 호스트만이 개인 키를 알고 있다.</li><li>암호화의 키와 복호화의 키가 다르지만 수학적 원리를 통해 해독이 가능합니다.</li><li>알고리즘 계산 방식이 다소 느림</li></ul></li></ul><h2 id="SSL의-동작-방법"><a href="#SSL의-동작-방법" class="headerlink" title="SSL의 동작 방법"></a>SSL의 동작 방법</h2><p>대칭키는 보안 문제가 있고, 공개키는 계산 방식이 다소 느리기 때문에 SSL에서는 대칭키와 공개키를 혼합해서 사용합니다.</p><p>컴퓨터와 컴퓨터가 네트워크를 이용해서 통신을 할때는 <code>악수(Handshake) -&gt; 전송 -&gt; 세션 종료</code> 3가지 단계가 있습니다. 각 단계에서 주고 받는 정보는 아래와 같습니다.</p><ol><li>Client Hello: Client가 접속합니다.<ul><li>Client에서 무작위 데이터를 Server에 전송합니다.</li><li>Client가 지원하는 암호화 목록을 Server에 전송합니다.</li><li>이미 SSL Handshake 단계를 했을 수도 있으니 재사용할 수 있도록 세션 정보를 Server에 전송합니다.</li></ul></li><li>Server Hello: Client Hello에 대해 응답해줍니다.<ul><li>Server에서 무작위 데이터를 Client에 전송합니다.</li><li>서버가 최종적으로 사용할 암호화 방식을 결정하고 Client에 전송합니다.</li><li>인증서를 Client에 전송합니다.</li></ul></li><li>클라이언트는 CA 목록에서 해당 인증서가 공인된 CA인지 확인합니다. CA 목록에 없다면 브라우저는 에러를 띄웁니다.</li><li>인증서를 CA 목록에 있는 공개키로 복호화합니다. 성공했다면 CA의 개인키로 암호화된 문서로 보증됩니다.</li><li>다음 세션을 위해 서로 공유한 무작위 데이터로 pre master secret 키를 생성합니다.<ul><li>이 키는 대칭키라서 노출되어선 안됩니다.</li></ul></li><li>여기서 공개키 기법을 사용하게 되는데 pre master secret 키를 Server의 공개키로 암호화하고 전송을 합니다.</li><li>Server는 자신의 비공개 키로 pre master secret 키를 안전하게 복호화할 수 있는 상태가 됩니다.</li><li>Server와 Client는 모두 pre master secret 값을 한번 더 대칭키 기법으로 암호화를 합니다. 그 결과 값을 master secret라고 하며 세션키로 이용됩니다.<ul><li>그냥 공개키를 사용하면 될텐데 왜 세션키를 대칭키로 사용하냐면 공개키는 알고리즘 계산 방식이 느리기 때문에 안전하게 공개키로 암호화를 하고나서 다시 대칭키로 바꿉니다.</li></ul></li><li>Client와 Server는 Handshake 단계의 끝을 알립니다.</li><li>다음부터는 세션키를 사용해서 검증합니다.</li><li>세션이 끝나면 대칭키인 세션키를 폐지합니다.</li></ol>]]></content:encoded>
      
      <comments>https://iseongho.github.io/posts/http-vs-https-and-ssl/#disqus_thread</comments>
    </item>
    
    <item>
      <title>리액트(React) 앱의 성능을 최적화시킨 비결</title>
      <link>https://iseongho.github.io/posts/react-optimizing-performance/</link>
      <guid>https://iseongho.github.io/posts/react-optimizing-performance/</guid>
      <pubDate>Sun, 30 Sep 2018 09:44:18 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;리액트(React)의 App 속도를 향상하게 만드는 몇 가지의 방법들을 숙지하고 있습니까? 요즘 사용되는 PC의 성능이면 별다른 문제가 없지만, 출시된 지 오래된 안드로이드 폰이라면 어떨까요? 렌더링 성능 이슈가 발생할 겁니다. 똑같은 앱을 만들
        
      
      </description>
      
      <content:encoded><![CDATA[<p>리액트(React)의 App 속도를 향상하게 만드는 몇 가지의 방법들을 숙지하고 있습니까? 요즘 사용되는 PC의 성능이면 별다른 문제가 없지만, 출시된 지 오래된 안드로이드 폰이라면 어떨까요? 렌더링 성능 이슈가 발생할 겁니다. 똑같은 앱을 만들더라도 더 성능이 좋은 앱을 만들어 봅시다.</p><h1 id="Component-vs-PureComponent-vs-Functional-Component"><a href="#Component-vs-PureComponent-vs-Functional-Component" class="headerlink" title="Component vs PureComponent vs Functional Component"></a>Component vs PureComponent vs Functional Component</h1><p>리액트(React)에서 컴포넌트를 만드는 방법에는 세 가지가 있습니다. 모두 다 특징이 있으며 어느 상황에서 어떤 방법을 사용해야 가장 최적화를 잘 할 수 있는지 알아보겠습니다.</p><h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>React를 확장(extends)해서 사용하는 클래스 기반의 Component입니다. 세 가지의 방법 중 유일하게 선택적으로 shouldComponentUpdate라는 라이프 사이클을 사용합니다. shouldComponentUpdate로 리렌더링(re-render)이 되는 상황을 정해줄 수 있지만 shouldComponentUpdate를 별도로 사용하지 않는다면 App의 Props와 State가 변경되는 모든 상황에 리렌더링(re-render)이 됩니다. 별도의 설정없이는 가장 많이 리렌더링(re-render)이 일어날 수 있는 방식입니다.</p><h2 id="PureComponent"><a href="#PureComponent" class="headerlink" title="PureComponent"></a>PureComponent</h2><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> PureComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>React를 확장(extends)해서 사용하는 클래스 기반의 PureComponent입니다. 기본적으로 Component와 똑같이 작동합니다만, 한 가지 다른 점이 있습니다. 오로지 자신의 Props와 State가 변경될 시에만 리렌더링(re-render)가 되도록 shouldComponentUpdate가 적용돼있다고 생각하시면 됩니다.</p><h2 id="Functional-Component"><a href="#Functional-Component" class="headerlink" title="Functional Component"></a>Functional Component</h2><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>React의 함수 기반 Component입니다. 클래스 기반의 컴포넌트들 두 개와 달리 State, Ref, 라이프 사이클 함수들을 사용할 수 없습니다. 그렇다면 클래스 기반의 컴포넌트들 보다 빠를까요? 아직 React에서 Functional Component 최적화 작업이 이루어지지 않아서 Component와 같이 작동하며 똑같은 성능을 냅니다. 미래에 최적화 작업이 이루어진다면 더 빨라지겠죠. 다만 this를 bind할 필요가 없고 간단하여 더 가독성 좋다는 장점이 있습니다.</p><h2 id="상황에-따른-컴포넌트-선언-방법"><a href="#상황에-따른-컴포넌트-선언-방법" class="headerlink" title="상황에 따른 컴포넌트 선언 방법"></a>상황에 따른 컴포넌트 선언 방법</h2><p>성능만 본다면 PureComponent &gt; Functional Component &gt;= Component입니다. 미래에 Functional Component가 최적화가 된다면 충분히 바뀔 수 있습니다.</p><ul><li>Component<ul><li>복잡한 컴포넌트다.</li><li>앱이 리렌더링(re-render)될 때 자신도 같이 돼야 한다.</li><li>this, ref 사용이 필요하다.</li></ul></li><li>PureComponent<ul><li>자식, 아이템 컴포넌트다.</li><li>자신의 Props와 State가 변할 때만 리렌더링(re-render)이 일어나면 된다.</li><li>this, ref 사용이 필요하다.</li></ul></li><li>Functional Component<ul><li>해당하는 게 없다.</li><li>간단한 컴포넌트다.</li><li>Props만으로 다 해결이 가능하다.</li><li>지금 가장 가독성 좋고, 최적화될 날을 기다리며 사용한다.</li></ul></li></ul><h1 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h1><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>React의 함수 기반 Component에서 사용할 수 있는 함수입니다. 이 함수는 새로운 Props, State가 추가되거나 변경될 시마다 불리며, 리렌더링(re-render) 여부를 정해줄 수 있습니다. 앱의 사용자에게 보여질 화면이 리렌더링(re-render)이 필요한 경우에만 true를 반환(return)해주고 아닌 경우엔 false를 반환(return)해주시면 됩니다.</p><h1 id="불필요한-변수와-함수-재생성"><a href="#불필요한-변수와-함수-재생성" class="headerlink" title="불필요한 변수와 함수 재생성"></a>불필요한 변수와 함수 재생성</h1><p>Render가 될 때마다 선언되지 않은 타입의 변수들을 재생성하게 됩니다. 정적인 변수와 함수는 render 함수 밖으로 빼둡시다.</p><h2 id="변수"><a href="#변수" class="headerlink" title="변수"></a>변수</h2><p>나쁜 예제:</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> PureComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>          backgroundColor<span class="token punctuation">:</span> <span class="token string">'black'</span><span class="token punctuation">,</span>          color<span class="token punctuation">:</span> <span class="token string">'pink'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>      <span class="token punctuation">></span></span>        Hello<span class="token punctuation">,</span> world<span class="token operator">!</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>위의 코드는 Render가 될 때마다 style의 Object를 재생성하게 됩니다.</p><hr><p>좋은 예제:</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> PureComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">{</span>  backgroundColor<span class="token punctuation">:</span> <span class="token string">'black'</span><span class="token punctuation">,</span>  color<span class="token punctuation">:</span> <span class="token string">'pink'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span> style <span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        Hello<span class="token punctuation">,</span> world<span class="token operator">!</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>정적인 변수를 render 밖으로 잘 빼뒀습니다.</p><h2 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h2><p>나쁜 예제:</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> PureComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span> <span class="token punctuation">{</span>  state <span class="token operator">=</span> <span class="token punctuation">{</span>    count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></span> <span class="token attr-name">}</span>      <span class="token punctuation">></span></span>        <span class="token punctuation">{</span> count <span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>위의 코드는 Render가 될 때마다 함수를 재생성하게 됩니다.</p><hr><p>좋은 예제:</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> PureComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span> <span class="token punctuation">{</span>  state <span class="token operator">=</span> <span class="token punctuation">{</span>    count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  onClickButton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onClickButton <span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">{</span> count <span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>미리 선언된 함수를 잘 사용합니다.</p><h1 id="State-vs-This"><a href="#State-vs-This" class="headerlink" title="State vs This"></a>State vs This</h1><p>React 초보면 흔히 저지를 수 있는 실수로, 변경되는 모든 값을 State로 지정하는 겁니다. 이것이 왜 실수인지 알아봅시다.</p><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>shouldComponentUpdate 함수를 사용하지 않은 경우 State가 변경되는 경우 렌더링(re-render)이 됩니다. 또한 State의 값은 변경될 시 렌더링(re-render)돼야 하는 것들로 구성되는 게 맞습니다.</p><h2 id="This"><a href="#This" class="headerlink" title="This"></a>This</h2><p><code>this.boolean === true</code>와 같이 this에 변수를 선언해줄 수 있습니다. 값이 변해도 렌더링(re-render)이 되지 않습니다.</p><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><p>count를 Submit하는 컴포넌트입니다. </p><p>나쁜 예제:</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> PureComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span> <span class="token punctuation">{</span>  state <span class="token operator">=</span> <span class="token punctuation">{</span>    count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  onClickPlusButton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  onClickSubmit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> onSubmit <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>    <span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onClickPlusButton <span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          Plus        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onClickSubmit <span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          Submit        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>사용자 입장에선 count가 변해도 count를 보여주지 않기 때문에 렌더링(re-render)을 할 필요가 없습니다.</p><hr><p>좋은 예제:</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> PureComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span> <span class="token punctuation">{</span>  count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  onClickPlusButton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  onClickSubmit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> onSubmit <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>    <span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onClickPlusButton <span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          Plus        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onClickSubmit <span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          Submit        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>불필요한 렌더링(re-render) 없이 Plus Button을 누른 횟수를 제출하는 컴포넌트를 완성했습니다. 렌더링(re-render)이 일어나지 않아도 <code>this.count</code> 값은 제대로 올라가고 있습니다.</p><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p>리액트(React)를 최적화하는 여러 가지의 방법을 알아보았습니다. 스스로 작성했던 코드 중 잘못된 코드가 있었나요? 그럼 Refactoring해보는 게 어떨까요? 똑같은 앱이라도 더 안좋은 환경에서 잘 돌아가도록 해봅시다. 또한 앞으로 만들 App은 최적화를 시켜서 작성해봅시다. Programmer로서의 가치를 높여봅시다.</p>]]></content:encoded>
      
      <comments>https://iseongho.github.io/posts/react-optimizing-performance/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Cron Expression - Cron 예약 표현식 배우기</title>
      <link>https://iseongho.github.io/posts/cron-expression/</link>
      <guid>https://iseongho.github.io/posts/cron-expression/</guid>
      <pubDate>Sat, 01 Sep 2018 09:32:19 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;작업 스케줄러(Scheduler)를 구현하다 보면 Cron 표현식(Cron Expression)을 사용하는 경우가 있는데요 한번 알아봅시다.&lt;/p&gt;
&lt;h1 id=&quot;Cron-식&quot;&gt;&lt;a href=&quot;#Cron-식&quot; class=&quot;headerlink&quot; t
        
      
      </description>
      
      <content:encoded><![CDATA[<p>작업 스케줄러(Scheduler)를 구현하다 보면 Cron 표현식(Cron Expression)을 사용하는 경우가 있는데요 한번 알아봅시다.</p><h1 id="Cron-식"><a href="#Cron-식" class="headerlink" title="Cron 식"></a>Cron 식</h1><pre class="line-numbers language-none"><code class="language-none">cron(분 시 일 월 요일 연도)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>총 6가지의 필드를 가지는 형태입니다. 각 필드 당 Space를 통해 구분하며, 모든 필드는 필수 필드이고 시간대는 UTC만 지원됩니다.</p><p>각 필드 당 무슨 값을 입력해야 하는지 아래의 표를 보고 알아봅시다.</p><table><thead><tr><th style="text-align:left">필드</th><th style="text-align:left">값</th><th style="text-align:left">와일드카드</th></tr></thead><tbody><tr><td style="text-align:left">분</td><td style="text-align:left">0~59</td><td style="text-align:left">, - * /</td></tr><tr><td style="text-align:left">시</td><td style="text-align:left">0~23</td><td style="text-align:left">, - * /</td></tr><tr><td style="text-align:left">일</td><td style="text-align:left">1~31</td><td style="text-align:left">, - * ? / L W</td></tr><tr><td style="text-align:left">월</td><td style="text-align:left">1-12 또는 JAN-DEC</td><td style="text-align:left">, - * /</td></tr><tr><td style="text-align:left">요일</td><td style="text-align:left">1-7 또는 SUN-SAT</td><td style="text-align:left">, - * ? / L #</td></tr><tr><td style="text-align:left">연도</td><td style="text-align:left">1970~2199</td><td style="text-align:left">, - * /</td></tr></tbody></table><p>해당하는 필드에 알맞은 값, 와일드카드를 넣으면 됩니다만 아직 와일드카드가 뭔지 모르실 겁니다. 아래의 표를 보고 알아봅시다.</p><table><thead><tr><th style="text-align:left">문자</th><th style="text-align:left">정의</th><th style="text-align:left">예</th></tr></thead><tbody><tr><td style="text-align:left">/</td><td style="text-align:left">증분 지정</td><td style="text-align:left">[분] 필드에 0/15를 입력하면 15분마다 실행이 됩니다.</td></tr><tr><td style="text-align:left">L</td><td style="text-align:left">“마지막” 지정</td><td style="text-align:left">[일] 필드에서 월이 마지막 날을 지정합니다. [요일] 필드에서 주의 마지막 날(토요일)을 지정합니다.</td></tr><tr><td style="text-align:left">W</td><td style="text-align:left">평일 지정</td><td style="text-align:left">5/W 같이 날짜와 함께 사용될 때 해당 월의 다섯 번째 평일에 가장 가까운 날을 지정합니다. 다섯 번째 날이 토요일인 경우에는 금요일에 실행이 됩니다. 다섯 번째 날이 일요일인 경우에는 월요일에 실행이 됩니다.</td></tr><tr><td style="text-align:left">#</td><td style="text-align:left">해당 월의 두 번째 또는 n번 째 날 지정</td><td style="text-align:left">3#2를 입력하면 해당 월의 두 번째 화요일(화요일은 주 7일 중 세 번째 날)이 지정됩니다.</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">모든 값 지정</td><td style="text-align:left">[일] 필드에서 사용할 경우, 해당 월의 모든 날이 지정됩니다.</td></tr><tr><td style="text-align:left">?</td><td style="text-align:left">지정된 값 없음</td><td style="text-align:left">또 다른 지정 값과 함께 사용됩니다. 예를 들어 특정 날짜가 지정되면 해당 주에서 어떤 요일에 해당하는지 신경 쓸 필요가 없습니다.</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">범위 지정</td><td style="text-align:left">10-12은 10, 11 및 12를 의미</td></tr><tr><td style="text-align:left">,</td><td style="text-align:left">추가 값 지정</td><td style="text-align:left">SUN, MON, TUE은 일요일, 월요일 및 화요일을 의미</td></tr><tr><td style="text-align:left">/</td><td style="text-align:left">증분 지정</td><td style="text-align:left">5/10은 5, 15, 25, 35 등을 의미</td></tr></tbody></table><h1 id="Cron-예시"><a href="#Cron-예시" class="headerlink" title="Cron 예시"></a>Cron 예시</h1><p>저의 경우 매일 한국 시각으로 9시와 16시에 예약을 걸어야 했습니다. 이걸 기준으로 배워봅시다.</p><h2 id="매일-오전-9시와-오후-4시-한국-시간-UTC-9-에-호출"><a href="#매일-오전-9시와-오후-4시-한국-시간-UTC-9-에-호출" class="headerlink" title="매일 오전 9시와 오후 4시(한국 시간 UTC+9)에 호출"></a>매일 오전 9시와 오후 4시(한국 시간 UTC+9)에 호출</h2><table><thead><tr><th style="text-align:left">필드</th><th style="text-align:left">값</th><th style="text-align:left">이유</th></tr></thead><tbody><tr><td style="text-align:left">분</td><td style="text-align:left">0</td><td style="text-align:left">정각에 부릅니다.</td></tr><tr><td style="text-align:left">시</td><td style="text-align:left">0,7</td><td style="text-align:left">2가지의 시간에 호출하기에 쉼표(,) 와일드카드를 씁니다. 또한 UTC만 지원함으로 한국 시간에서 9시간을 빼줍니다.</td></tr><tr><td style="text-align:left">일</td><td style="text-align:left">*</td><td style="text-align:left">모든 요일에 부릅니다.</td></tr><tr><td style="text-align:left">월</td><td style="text-align:left">*</td><td style="text-align:left">모든 달에 부릅니다.</td></tr><tr><td style="text-align:left">요일</td><td style="text-align:left">?</td><td style="text-align:left">요일은 상관이 없습니다. 별(*)로 해도 된다고 생각하시겠지만 [일]과 [요일] 모두 별(*)로 하면 에러가 납니다.</td></tr><tr><td style="text-align:left">연도</td><td style="text-align:left">*</td><td style="text-align:left">모든 년도에 부릅니다.</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">cron(0 0,7 * * ? *)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="매일-오전-10시-UTC-에-호출"><a href="#매일-오전-10시-UTC-에-호출" class="headerlink" title="매일 오전 10시(UTC)에 호출"></a>매일 오전 10시(UTC)에 호출</h2><pre class="line-numbers language-none"><code class="language-none">cron(0 10 * * ? *)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="매일-오후-12시-15분-UTC-에-호출"><a href="#매일-오후-12시-15분-UTC-에-호출" class="headerlink" title="매일 오후 12시 15분(UTC)에 호출"></a>매일 오후 12시 15분(UTC)에 호출</h2><pre class="line-numbers language-none"><code class="language-none">cron(15 12 * * ? *)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="매주-월요일부터-금요일까지-오후-6시-UTC-에-호출"><a href="#매주-월요일부터-금요일까지-오후-6시-UTC-에-호출" class="headerlink" title="매주 월요일부터 금요일까지 오후 6시(UTC)에 호출"></a>매주 월요일부터 금요일까지 오후 6시(UTC)에 호출</h2><pre class="line-numbers language-none"><code class="language-none">cron(0 18 ? * MON-FRI *)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="매월-첫째-날-오전-8시-UTC-에-호출"><a href="#매월-첫째-날-오전-8시-UTC-에-호출" class="headerlink" title="매월 첫째 날 오전 8시(UTC)에 호출"></a>매월 첫째 날 오전 8시(UTC)에 호출</h2><pre class="line-numbers language-none"><code class="language-none">cron(0 8 1 * ? *)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="월요일부터-금요일까지-10분마다-호출"><a href="#월요일부터-금요일까지-10분마다-호출" class="headerlink" title="월요일부터 금요일까지 10분마다 호출"></a>월요일부터 금요일까지 10분마다 호출</h2><pre class="line-numbers language-none"><code class="language-none">cron(0/10 * ? * MON-FRI *)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="월요일부터-금요일까지-오전-8시부터-오후-5시-55분-UTC-동안-5분마다-호출"><a href="#월요일부터-금요일까지-오전-8시부터-오후-5시-55분-UTC-동안-5분마다-호출" class="headerlink" title="월요일부터 금요일까지 오전 8시부터 오후 5시 55분(UTC) 동안 5분마다 호출"></a>월요일부터 금요일까지 오전 8시부터 오후 5시 55분(UTC) 동안 5분마다 호출</h2><pre class="line-numbers language-none"><code class="language-none">cron(0/5 8-17 ? * MON-FRI *)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="매월-첫-번째-월요일-오전-9시-UTC-에-호출"><a href="#매월-첫-번째-월요일-오전-9시-UTC-에-호출" class="headerlink" title="매월 첫 번째 월요일 오전 9시(UTC)에 호출"></a>매월 첫 번째 월요일 오전 9시(UTC)에 호출</h2><pre class="line-numbers language-none"><code class="language-none">cron(0 9 ? * 2#1 *)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="주의-사항"><a href="#주의-사항" class="headerlink" title="주의 사항"></a>주의 사항</h1><ul><li>비율이 1분 이내인 cron 표현식은 지원되지 않습니다.</li><li>[일] 또는 [요일] 값 중 하나는 반드시 물음표(?)여야 합니다.</li></ul>]]></content:encoded>
      
      <comments>https://iseongho.github.io/posts/cron-expression/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo SEO - 하루 만에 검색 엔진 최적화 시키기</title>
      <link>https://iseongho.github.io/posts/hexo-seo/</link>
      <guid>https://iseongho.github.io/posts/hexo-seo/</guid>
      <pubDate>Sun, 26 Aug 2018 08:27:39 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Hexo와 같이 개인이 직접 만들어 운영하는 블로그는 직접 검색 엔진 최적화(영어: search engine optimization, SEO)를 시켜줘야 합니다. 나름 시간을 많이 투자해야 하는 작업인데 다행히도 Hexo는 SEO와 관련된 플러그
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Hexo와 같이 개인이 직접 만들어 운영하는 블로그는 직접 검색 엔진 최적화(영어: search engine optimization, SEO)를 시켜줘야 합니다. 나름 시간을 많이 투자해야 하는 작업인데 다행히도 Hexo는 SEO와 관련된 플러그인이 많이 있습니다. 해당 글에선 그 플러그인들을 이용한 SEO에 대해 다뤄보겠습니다.</p><h1 id="플러그인-설치-및-사용"><a href="#플러그인-설치-및-사용" class="headerlink" title="플러그인 설치 및 사용"></a>플러그인 설치 및 사용</h1><h2 id="hexo-auto-canonical"><a href="#hexo-auto-canonical" class="headerlink" title="hexo-auto-canonical"></a><a href="https://github.com/HyunSeob/hexo-auto-canonical" rel="external nofollow noopener noreferrer" target="_blank">hexo-auto-canonical</a></h2><p>자동으로 표준 링크를 생성해줍니다.</p><p>설치</p><pre class="line-numbers language-console"><code class="language-console">npm install --save hexo-auto-canonical<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>사용</p><p>HTML의 HEAD 태그 안에 넣어줍니다.</p><p>ejs인 경우</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">autoCanonical</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> page<span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>jade인 경우</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">|</span> <span class="token operator">!</span><span class="token punctuation">{</span> <span class="token function">autoCanonical</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> page<span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="hexo-autonofollow"><a href="#hexo-autonofollow" class="headerlink" title="hexo-autonofollow"></a><a href="https://github.com/liuzc/hexo-autonofollow" rel="external nofollow noopener noreferrer" target="_blank">hexo-autonofollow</a></h2><p>블로그의 포스들에 있는 외부 링크들에 자동으로 nofollow 속성을 추가해줍니다.</p><p>설치</p><pre class="line-numbers language-console"><code class="language-console">npm install hexo-autonofollow --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>사용</p><p>_config.yml 파일에 추가합니다.</p><pre class="line-numbers language-yml"><code class="language-yml">nofollow:    enable: true    exclude:    - exclude1.com    - exclude2.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>enable - 플러그인을 사용합니다. 기본값은 false입니다.</li><li>exclude - 들어오지 못하게 할 hostname</li></ul><h2 id="hexo-generator-feed"><a href="#hexo-generator-feed" class="headerlink" title="hexo-generator-feed"></a><a href="https://github.com/hexojs/hexo-generator-feed" rel="external nofollow noopener noreferrer" target="_blank">hexo-generator-feed</a></h2><p>자동으로 Atom 1.0 또는 RSS 2.0 피드를 생성해줍니다.</p><p>설치</p><pre class="line-numbers language-console"><code class="language-console">npm install hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>사용</p><p>_config.yml 파일에 추가합니다. 피드의 종류를 정할 수 있는데 네이버는 Atom을 지원하지 않음으로 RSS2를 권장합니다.</p><pre class="line-numbers language-yml"><code class="language-yml">feed:  type: rss2  path: rss2.xml  limit: 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>type - 피드의 종류 (atom/rss2)</li><li>path - 피드가 생성될 경로 (Default: atom.xml/rss2.xml)</li><li>limit - 최신 포스트의 개수 설정 (0 또는 false 입력 시 모든 포스트)</li></ul><h2 id="hexo-generator-seo-friendly-sitemap"><a href="#hexo-generator-seo-friendly-sitemap" class="headerlink" title="hexo-generator-seo-friendly-sitemap"></a><a href="https://github.com/ludoviclefevre/hexo-generator-seo-friendly-sitemap" rel="external nofollow noopener noreferrer" target="_blank">hexo-generator-seo-friendly-sitemap</a></h2><p>설치</p><pre class="line-numbers language-console"><code class="language-console">npm install hexo-generator-seo-friendly-sitemap --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>사용</p><pre class="line-numbers language-yml"><code class="language-yml">sitemap:  path: sitemap.xml  tag: false  category: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>path - sitemap이 생성될 경로</li><li>tag - sitemap에 tag 포함 여부</li><li>category - sitemap에 category 포함 여부</li></ul><h2 id="hexo-generator-robotstxt"><a href="#hexo-generator-robotstxt" class="headerlink" title="hexo-generator-robotstxt"></a><a href="https://github.com/leecrossley/hexo-generator-robotstxt" rel="external nofollow noopener noreferrer" target="_blank">hexo-generator-robotstxt</a></h2><p>자동으로 robots.txt 파일을 생성해줍니다.</p><p>설치</p><pre class="line-numbers language-console"><code class="language-console">npm install hexo-generator-robotstxt --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>사용</p><p>_config.yml 파일에 추가합니다.</p><pre class="line-numbers language-yml"><code class="language-yml">robotstxt:  useragent: "*"  allow:    - /  sitemap: https://username.github.io/sitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>결과</p><pre class="line-numbers language-html"><code class="language-html">User-agent: *Allow: /Sitemap: https://username.github.io/sitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="검색-엔진에-등록하기"><a href="#검색-엔진에-등록하기" class="headerlink" title="검색 엔진에 등록하기"></a>검색 엔진에 등록하기</h1><p>SEO 초기 세팅이 끝났으니 그걸 검색 엔진들에게 알려줘야 합니다! 간혹 사이트의 소유권 인증하라고 제공받은 파일을 사이트에 올리라고 하는데 public 폴더 안에 넣어주시고 <code>hexo deploy</code>해주시면 됩니다!</p><h2 id="구글"><a href="#구글" class="headerlink" title="구글"></a>구글</h2><p><a href="https://www.google.com/webmasters/tools/home?hl=ko" rel="external nofollow noopener noreferrer" target="_blank">구글 웹마스터 도구</a>에서 구글의 SEO를 관리할 수 있습니다.</p><ul><li>본인의 사이트인 것을 인증해야 등록이 가능합니다</li><li>Search Console &gt; 크롤링 &gt; Sitemap에서 /sitemap.xml과 /rss2.xml을 등록해야 합니다.</li></ul><h2 id="네이버"><a href="#네이버" class="headerlink" title="네이버"></a>네이버</h2><p><a href="https://webmastertool.naver.com/" rel="external nofollow noopener noreferrer" target="_blank">네이버 웹마스터 도구</a>에서 네이버의 SEO를 관리할 수 있습니다.</p><ul><li>본인의 사이트인 것을 인증해야 등록이 가능합니다.</li><li>요청 &gt; (사이트맵 제출/RSS 제출)에서 (sitemap.xml/rss2.xml)을 등록해줍니다.</li></ul><h2 id="다음"><a href="#다음" class="headerlink" title="다음"></a>다음</h2><p><a href="https://register.search.daum.net/index.daum" rel="external nofollow noopener noreferrer" target="_blank">다음 검색등록</a>에서 다음의 SEO를 관리할 수 있습니다.</p><ul><li>간단히 사이트의 주소와 이메일만으로 등록할 수 있습니다.</li></ul>]]></content:encoded>
      
      <comments>https://iseongho.github.io/posts/hexo-seo/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Git Subtree 사용법 - 하나의 저장소에서 여러 저장소를 관리하기</title>
      <link>https://iseongho.github.io/posts/git-subtree/</link>
      <guid>https://iseongho.github.io/posts/git-subtree/</guid>
      <pubDate>Sun, 19 Aug 2018 04:35:13 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Git에서 저장소를 관리하다 보면, 상위 저장소에서 다른 저장소를 Clone하게 되는 경우가 있습니다. 그 경우 상위 저장소에서 하위 저장소를 Push하면 다른 저장소들은 빈 폴더로 Push가 됩니다. 해당 문제를 해결하기 적합한 것이 Subtr
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Git에서 저장소를 관리하다 보면, 상위 저장소에서 다른 저장소를 Clone하게 되는 경우가 있습니다. 그 경우 상위 저장소에서 하위 저장소를 Push하면 다른 저장소들은 빈 폴더로 Push가 됩니다. 해당 문제를 해결하기 적합한 것이 Subtree라는 것입니다. 한번 공부해봅시다.</p><h1 id="Subtree의-기능"><a href="#Subtree의-기능" class="headerlink" title="Subtree의 기능"></a>Subtree의 기능</h1><p>상위 저장소에서 하위 저장소를 가질 수 있으며, 마치 하나의 저장소처럼 관리하도록 도와주는 기능입니다.</p><h1 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h1><ul><li>하나의 저장소에서 여러 저장소를 통합 관리가 가능합니다.</li><li>통합된 저장소와 원격 저장소는 별개로 변경 사항을 경우에 알맞게 Push, Pull이 가능합니다.</li></ul><h1 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h1><ul><li>Subtree Push를 하려면 <code>--prefix</code> 옵션을 사용해야 하므로 하위 저장소의 경로를 기억하고 있어야 합니다.</li></ul><h1 id="Subtree-생성하기"><a href="#Subtree-생성하기" class="headerlink" title="Subtree 생성하기"></a>Subtree 생성하기</h1><p>상위 프로젝트를 Parent, 하위 프로젝트를 Child라고 가정하여 설명하겠습니다.</p><h2 id="1-상위-저장소로-이동"><a href="#1-상위-저장소로-이동" class="headerlink" title="1. 상위 저장소로 이동"></a>1. 상위 저장소로 이동</h2><p>모든 작업은 상위 저장소의 Root 경로에서 이루어집니다. Console에서 상위 저장소로 가줍시다.</p><pre class="line-numbers language-console"><code class="language-console">git clone Parent.gitcd Parent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-원격-참조-추가"><a href="#2-원격-참조-추가" class="headerlink" title="2. 원격 참조 추가"></a>2. 원격 참조 추가</h2><p>Subtree에서 Add, Push, Pull, …을 할 때 어느 저장소에서 이루어지는지 참조를 추가해야 합니다.</p><pre class="line-numbers language-console"><code class="language-console"># git remote add { Remote name } { Child repo }git remote add remote-child Child.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Remote name은 원하시는 대로 정하시면 됩니다. 참조 시에 사용될 이름입니다. 해당 글에선 remote-child라는 이름을 사용하겠습니다.</p><p>잘 추가됐는지 확인하고 싶다면 아래의 명령어를 입력해보시면 됩니다.</p><pre class="line-numbers language-console"><code class="language-console">git remote -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-Subtree-추가"><a href="#3-Subtree-추가" class="headerlink" title="3. Subtree 추가"></a>3. Subtree 추가</h2><p>드디어 Subtree 명령어를 사용합니다.</p><pre class="line-numbers language-console"><code class="language-console"># git subtree add --prefix { Child path } { Remote name } { Child branch }git subtree add --prefix childs/project remote-child master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>Child path는 remote에 참조된 저장소가 어느 폴더에 저장될 지를 정해주는 겁니다. (어느 곳에 Clone 시킬지 라고 생각하면 편합니다.) 해당 글에선 childs 폴더 안에 project라는 폴더를 사용하겠습니다.</p><ul><li>폴더는 미리 만들어져 있으면 안 됩니다. 그 경우 <code>rm -rf { Child path }</code>로 지워주시고 다시 <code>git subtree add ...</code>를 하시길 바랍니다.</li></ul></li><li><p>Remote name은 remote add 할 때 지정하신 이름으로 해주시면 됩니다. 해당 글에선 위에서 정한 대로 remote-child라는 이름을 사용합니다.</p></li><li><p>Child branch는 어느 브랜치에서 add할 지 정해주는 겁니다. 해당 글에선 무난한 master로 정하겠습니다.</p></li></ul><h1 id="Subtree-관리-Push-Pull"><a href="#Subtree-관리-Push-Pull" class="headerlink" title="Subtree 관리(Push, Pull)"></a>Subtree 관리(Push, Pull)</h1><p>Subtree의 Child 관리에는 두 가지가 있습니다.</p><ul><li>Parent 저장소에서 Child를 관리한다. (Parent 입장에서 Subtree는 평범한 폴더일 뿐입니다.)</li><li>Child의 저장소를 직접 관리한다. (이 경우 <code>git subtree push</code>, <code>git subtree pull</code>을 사용합니다.)</li></ul><h2 id="Parent-저장소에서-Child를-관리하기"><a href="#Parent-저장소에서-Child를-관리하기" class="headerlink" title="Parent 저장소에서 Child를 관리하기"></a>Parent 저장소에서 Child를 관리하기</h2><p>평소에 Push하던 과정을 진행하시면 됩니다.</p><pre class="line-numbers language-console"><code class="language-console">git add { Child path }git commit -m { Commit message }git push origin { branch }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>이렇게 <code>git push</code>만 하는 경우에는 오로지 Parent 저장소에만 Child의 변경 사항이 반영됩니다.</p><h2 id="Child의-저장소를-직접-관리하기"><a href="#Child의-저장소를-직접-관리하기" class="headerlink" title="Child의 저장소를 직접 관리하기"></a>Child의 저장소를 직접 관리하기</h2><p>Parent에서 Child 변경 사항을 Child 저장소에도 반영하기 위해선 이 기능을 사용해야 합니다. Parent 저장소에서 Child 폴더까지 Push를 완료했다는 전제하에 가능합니다.</p><pre class="line-numbers language-console"><code class="language-console"># pushgit subtree push --prefix { Child path } { Remote name } { Child branch }# pullgit subtree pull --prefix { Child path } { Remote name } { Child branch }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content:encoded>
      
      <comments>https://iseongho.github.io/posts/git-subtree/#disqus_thread</comments>
    </item>
    
    <item>
      <title>템플릿 엔진 Pug(Jade) 사용법</title>
      <link>https://iseongho.github.io/posts/node-template-engine-pug/</link>
      <guid>https://iseongho.github.io/posts/node-template-engine-pug/</guid>
      <pubDate>Sun, 05 Aug 2018 14:07:18 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Pug는 요즘 가장 핫한 Node Express Template Engine입니다.&lt;br&gt;Pug를 통해 HTML 코드의 생산성을 증진하고, 동적 + 정적인 View를 만들기 위해 공부해봅시다.&lt;/p&gt;
&lt;h1 id=&quot;Template-Engine-P
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Pug는 요즘 가장 핫한 Node Express Template Engine입니다.<br>Pug를 통해 HTML 코드의 생산성을 증진하고, 동적 + 정적인 View를 만들기 위해 공부해봅시다.</p><h1 id="Template-Engine-Pug의-장점"><a href="#Template-Engine-Pug의-장점" class="headerlink" title="Template Engine Pug의 장점"></a>Template Engine Pug의 장점</h1><ul><li>HTML을 간단하게 표현해서 가독성이 좋다.</li><li>마크업 문법보다 코드량이 적어 생산성이 좋아진다.</li><li>JS 연산 결과를 쉽게 보여줄 수 있다.</li><li>정적인 부분과 동적인 부분을 따로 할 수 있다.</li><li>타 Express Engine보다 Google Trend 수치가 높다.</li></ul><h1 id="Pug는-Jade였다"><a href="#Pug는-Jade였다" class="headerlink" title="Pug는 Jade였다"></a>Pug는 Jade였다</h1><p>Pug는 기존에 Jade라는 이름을 가지고 있었습니다. 하지만 이미 상표권이 있는 이름이였기 때문에 Pug라는 이름으로 바꾸게 됩니다.</p><h1 id="Pug와-HTML-코드의-차이"><a href="#Pug와-HTML-코드의-차이" class="headerlink" title="Pug와 HTML 코드의 차이"></a>Pug와 HTML 코드의 차이</h1><p>백 번 듣는 것보다 한 번 보는 게 낫겠죠. 직접 코드를 보고 차이점에 대해 생각해봅시다.</p><h2 id="Pug"><a href="#Pug" class="headerlink" title="Pug"></a>Pug</h2><pre class="line-numbers language-js"><code class="language-js">doctype html<span class="token function">html</span><span class="token punctuation">(</span>lang<span class="token operator">=</span><span class="token string">'ko'</span><span class="token punctuation">)</span>    head        title Pug tutorial        style<span class="token punctuation">.</span>            <span class="token punctuation">.</span>title <span class="token punctuation">{</span>                color<span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        script<span class="token punctuation">.</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This is log'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    body        #header            h1<span class="token punctuation">.</span>title Header        #main            div Main            ul                <span class="token operator">-</span> <span class="token keyword">var</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>                each item <span class="token keyword">in</span> items                    li<span class="token operator">=</span> item            pre                <span class="token operator">|</span> This is                <span class="token operator">|</span> multiline        #footer            p Footer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ko<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Pug tutorial<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.title</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This is log'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span>                This is                multiline            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="차이점에-대하여"><a href="#차이점에-대하여" class="headerlink" title="차이점에 대하여"></a>차이점에 대하여</h3><p>HTML보다 Pug 코드가 훨씬 적다는 게 눈으로 보입니다. 따라서 Pug를 접하시게 된다면 처음에는 문법을 익히느라 시간이 필요하겠지만 장기적으로 봤을 땐 빠른 개발이 가능할 것입니다.</p><h1 id="문법-특징"><a href="#문법-특징" class="headerlink" title="문법 특징"></a>문법 특징</h1><ul><li>마크업과 달리 닫는 태그가 없다. * <code>&lt;div&gt;&lt;/div&gt;</code></li><li>들여쓰기로 종속성을 구별한다.</li><li>태그를 선언하려면 태그 이름만 쓰면 된다. * div { content }</li><li>ID와 Class를 선언하려면 CSS의 기본 선택자를 사용하면 된다. * .container</li><li>태그 없이 ID나 Class만 선언하면 자동으로 div 태그를 사용한다.</li><li>태그에 속성을 주고 싶으면 괄호를 이용한다. * html(lang=’ko’)</li><li>여러 줄을 사용하고 싶으면 |를 사용한다.</li><li>Script나 CSS로 태그를 사용할 땐 끝에 .을 입력한다. * script., style.</li><li>템플릿 안에서 Javascript를 사용하려면 앞에 -(Hyphen)을 입력한다.</li></ul><h1 id="문법-요약"><a href="#문법-요약" class="headerlink" title="문법 요약"></a>문법 요약</h1><p>Pug 작성에 있어서 자주 사용될 것 같은 문법을 모아봤습니다.</p><h2 id="Doctype-지정"><a href="#Doctype-지정" class="headerlink" title="Doctype 지정"></a>Doctype 지정</h2><p>HTML엔 정말 다양한 Doctype이 있고, Custom Doctype도 존재합니다. 하지만 자주 사용되는 HTML5에 대해서만 작성해두겠습니다.</p><h3 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h3><p>작성</p><pre class="line-numbers language-js"><code class="language-js">doctype html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>결과물</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Block-생성"><a href="#Block-생성" class="headerlink" title="Block 생성"></a>Block 생성</h2><p>작성</p><pre class="line-numbers language-js"><code class="language-js">p foo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>결과물</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>foo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="속성"><a href="#속성" class="headerlink" title="속성"></a>속성</h2><p>괄호를 이용하여 속성을 주입해줍니다.</p><h3 id="단일-속성"><a href="#단일-속성" class="headerlink" title="단일 속성"></a>단일 속성</h3><p>작성</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">a</span><span class="token punctuation">(</span>href<span class="token operator">=</span><span class="token string">'google.com'</span><span class="token punctuation">)</span> Google<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>결과물</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>google.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Google<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="다중-속성"><a href="#다중-속성" class="headerlink" title="다중 속성"></a>다중 속성</h3><p>작성</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">input</span><span class="token punctuation">(</span>  type<span class="token operator">=</span><span class="token string">'checkbox'</span>  name<span class="token operator">=</span><span class="token string">'agreement'</span>  checked<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>결과물</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>agreement<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Conditionals-조건문"><a href="#Conditionals-조건문" class="headerlink" title="Conditionals 조건문"></a>Conditionals 조건문</h2><p>여러 종류의 조건문에 대해 다뤄보겠습니다.</p><h3 id="if문"><a href="#if문" class="headerlink" title="if문"></a>if문</h3><p>작성</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">-</span> <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> description<span class="token punctuation">:</span> <span class="token string">'foo bar baz'</span> <span class="token punctuation">}</span><span class="token operator">-</span> <span class="token keyword">var</span> authorised <span class="token operator">=</span> <span class="token boolean">false</span>#user  <span class="token keyword">if</span> user<span class="token punctuation">.</span>description    h2<span class="token punctuation">.</span>green Description    p<span class="token punctuation">.</span>description<span class="token operator">=</span> user<span class="token punctuation">.</span>description  <span class="token keyword">else</span> <span class="token keyword">if</span> authorised    h2<span class="token punctuation">.</span>blue Description    p<span class="token punctuation">.</span>description<span class="token punctuation">.</span>      User has no description<span class="token punctuation">,</span>      why not add one<span class="token operator">...</span>  <span class="token keyword">else</span>    h2<span class="token punctuation">.</span>red Description    p<span class="token punctuation">.</span>description User has no description<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>결과물</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Description<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>foo bar baz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unless문"><a href="#unless문" class="headerlink" title="unless문"></a>unless문</h3><p>if의 반대 조건일 경우 true가 실행되는 조건문입니다.</p><p>이것과</p><pre class="line-numbers language-js"><code class="language-js">unless user<span class="token punctuation">.</span>isAnonymous  p You're logged <span class="token keyword">in</span> <span class="token keyword">as</span> #<span class="token punctuation">{</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>이것은 동일한 조건입니다.</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token operator">!</span>user<span class="token punctuation">.</span>isAnonymous  p You're logged <span class="token keyword">in</span> <span class="token keyword">as</span> #<span class="token punctuation">{</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Case-조건문"><a href="#Case-조건문" class="headerlink" title="Case 조건문"></a>Case 조건문</h2><p>템플릿에서 자바스크립트 코드를 사용하기 위해 앞에 -(Hyphen)을 입력합니다.</p><p>작성</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">-</span> <span class="token keyword">var</span> friends <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">case</span> friends  when <span class="token number">0</span>    p you have no friends  when <span class="token number">1</span>    p you have a friend  <span class="token keyword">default</span>    p you have #<span class="token punctuation">{</span>friends<span class="token punctuation">}</span> friends<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>결과물</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>you have 10 friends<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="OR문과-Break"><a href="#OR문과-Break" class="headerlink" title="OR문과 Break"></a>OR문과 Break</h3><ul><li>OR문을 사용하고 싶다면 when 밑에 줄에 다시 when 조건을 걸면 됩니다.</li><li>Break는 - break라고 입력합니다.</li></ul><p>작성</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">-</span> <span class="token keyword">var</span> friends <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">case</span> friends  when <span class="token number">0</span>  when <span class="token number">1</span>    p you have very few friends    <span class="token operator">-</span> <span class="token keyword">break</span>  <span class="token keyword">default</span>    p you have #<span class="token punctuation">{</span>friends<span class="token punctuation">}</span> friends<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>결과물</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>you have very few friends<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Element-조건문"><a href="#Element-조건문" class="headerlink" title="Element 조건문"></a>Element 조건문</h3><p>작성</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">-</span> <span class="token keyword">var</span> friends <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">case</span> friends  when <span class="token number">0</span><span class="token punctuation">:</span> p you have no friends  when <span class="token number">1</span><span class="token punctuation">:</span> p you have a friend  <span class="token keyword">default</span><span class="token punctuation">:</span> p you have #<span class="token punctuation">{</span>friends<span class="token punctuation">}</span> friends<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>결과물</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>you have a friend<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h2><p>템플릿에서 자바스크립트 코드를 사용하기 위해 앞에 -(Hyphen)을 입력합니다.</p><h3 id="for문"><a href="#for문" class="headerlink" title="for문"></a>for문</h3><p>작성</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">-</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>  li item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>결과물</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>item<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>item<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>item<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="each문"><a href="#each문" class="headerlink" title="each문"></a>each문</h3><p>작성</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">-</span>  <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Uno"</span><span class="token punctuation">,</span> <span class="token string">"Dos"</span><span class="token punctuation">,</span> <span class="token string">"Tres"</span><span class="token punctuation">,</span>          <span class="token string">"Cuatro"</span><span class="token punctuation">,</span> <span class="token string">"Cinco"</span><span class="token punctuation">,</span> <span class="token string">"Seis"</span><span class="token punctuation">]</span>each item <span class="token keyword">in</span> list  li<span class="token operator">=</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>결과물</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Uno<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Dos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Tres<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Cuatro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Cinco<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Seis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="마크업-코드를-내용물로-사용하기"><a href="#마크업-코드를-내용물로-사용하기" class="headerlink" title="마크업 코드를 내용물로 사용하기"></a>마크업 코드를 내용물로 사용하기</h2><p>그냥 작성하면 아래와 같이 꺽쇠가 <code>&amp;lt;</code>와 <code>&amp;gt;</code>로 변합니다.</p><p>작성</p><pre class="line-numbers language-js"><code class="language-js">p  <span class="token operator">=</span> <span class="token string">'This code is &lt;escaped>!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>결과물</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This code is <span class="token entity" title="&lt;">&amp;lt;</span>escaped<span class="token entity" title="&gt;">&amp;gt;</span>!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>‘=’을 ‘!=’로 고쳐주면 마크업 태그를 그대로 사용합니다.</p><p>작성</p><pre class="line-numbers language-js"><code class="language-js">p  <span class="token operator">!=</span> <span class="token string">'This code is &lt;strong>not&lt;/strong> escaped!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>결과물</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This code is <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>not<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> escaped!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Mixin-변수"><a href="#Mixin-변수" class="headerlink" title="Mixin 변수"></a>Mixin 변수</h2><p>템플릿 단위로 재사용 가능한 변수를 사용해봅시다. mixin으로 변수를 선언하고 ‘+{변수 이름}’으로 사용합니다.</p><p>작성</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 선언</span>mixin list  ul    li foo    li bar    li baz<span class="token comment" spellcheck="true">// 사용</span><span class="token operator">+</span>list<span class="token operator">+</span>list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>결과물</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>foo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>bar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>baz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>foo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>bar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>baz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Includes-템플릿-파일들-불러오기"><a href="#Includes-템플릿-파일들-불러오기" class="headerlink" title="Includes(템플릿 파일들 불러오기)"></a>Includes(템플릿 파일들 불러오기)</h2><p>include { 파일 경로 }만 적어주시면 됩니다.</p><pre class="line-numbers language-js"><code class="language-js">html  include includes<span class="token operator">/</span>head<span class="token punctuation">.</span>pug  body    h1 My Site<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="템플릿을-나누어-블로그-만들기"><a href="#템플릿을-나누어-블로그-만들기" class="headerlink" title="템플릿을 나누어 블로그 만들기"></a>템플릿을 나누어 블로그 만들기</h1><p>위의 Includes 설명만으론 이해가 안 될 수 있을 겁니다. Includes를 익히기 위해 블로그를 개발해봅시다.</p><h2 id="생성해야-할-파일들"><a href="#생성해야-할-파일들" class="headerlink" title="생성해야 할 파일들"></a>생성해야 할 파일들</h2><ul><li>blog.pug</li><li>includes/header.pug</li><li>includes/footer.pug</li></ul><h2 id="뼈대-blog-pug"><a href="#뼈대-blog-pug" class="headerlink" title="뼈대 (blog.pug)"></a>뼈대 (blog.pug)</h2><pre class="line-numbers language-js"><code class="language-js">doctype htmlhtml  title My Blog  body    include includes<span class="token operator">/</span>header<span class="token punctuation">.</span>pug <span class="token comment" spellcheck="true">// 헤더를 불러옵니다.</span>    p#main Welcome to my blog<span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 헤더와 푸터 사이의 내용을 입력합니다.</span>    include includes<span class="token operator">/</span>footer<span class="token punctuation">.</span>pug <span class="token comment" spellcheck="true">// 푸터를 불러옵니다.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="헤더-header-pug"><a href="#헤더-header-pug" class="headerlink" title="헤더 (header.pug)"></a>헤더 (header.pug)</h2><pre class="line-numbers language-js"><code class="language-js">head  title My Blog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="푸터-footer-pug"><a href="#푸터-footer-pug" class="headerlink" title="푸터 (footer.pug)"></a>푸터 (footer.pug)</h2><pre class="line-numbers language-js"><code class="language-js">footer#footer  p Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> anonymous<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="결과물"><a href="#결과물" class="headerlink" title="결과물"></a>결과물</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>My Blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>My Blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Welcome to my blog.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Copyright (c) anonymous<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>include한 header.pug의 ‘My Blog’가 잘 보입니다.</li><li>blog.pug에 입력해둔 ‘Welcome to my blog.’가 잘 보입니다.</li><li>include한 footer.pug의 ‘Copyright (c) anonymous’가 잘 보입니다.</li></ul><h1 id="마치면서"><a href="#마치면서" class="headerlink" title="마치면서"></a>마치면서</h1><p>해당 강좌에서 사용된 프로젝트는 <a href="https://github.com/iseongho/pug-tutorial" rel="external nofollow noopener noreferrer" target="_blank">github/pug-tutorial</a>에 올려뒀습니다.</p>]]></content:encoded>
      
      <comments>https://iseongho.github.io/posts/node-template-engine-pug/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
